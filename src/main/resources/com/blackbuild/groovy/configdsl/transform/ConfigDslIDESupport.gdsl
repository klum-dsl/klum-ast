package com.blackbuild.groovy.configdsl.transform

import com.intellij.psi.*

contributor(ctype:hasAnnotation("com.blackbuild.groovy.configdsl.transform.DSL")) {

    ClassConfig clazz = new ClassConfig(psiClass)
    method(
            name: "apply",
            doc: "Applies the configuration in the closure." as String,
            params: [closure: Closure.class.name],
            type: clazz.type.qualifiedName
    )

    method(
            name: "copyFrom",
            doc: "Copies fields from template (excluding key and owner fields)" as String,
            params: [template: psiClass.qualifiedName],
            type: clazz.type.qualifiedName
    )

    if (clazz.key) {
        method(
                name: "create",
                doc: "Creates a new instance of ${clazz.type.qualifiedName} using 'key' as $clazz.key" as String,
                isStatic: true,
                params: ["$clazz.key": "java.lang.String", closure: Closure.class.name],
                type: clazz.type.qualifiedName
        )
        method(
                name: "createFromSnippet",
                doc: "Creates a new instance of ${clazz.type.qualifiedName} using 'key' as $clazz.key, using the given String as closure content" as String,
                isStatic: true,
                params: ["$clazz.key": "java.lang.String", content: "java.lang.String"],
                type: clazz.type.qualifiedName
        )
        method(constructor: true, params: ["$clazz.key": "java.lang.String"])
    } else {
        method(
                name: "create",
                doc: "Creates a new instance of ${clazz.type.qualifiedName}" as String,
                isStatic: true,
                params: [closure: Closure.class.name],
                type: clazz.type.qualifiedName
        )
        method(
                name: "createFromSnippet",
                doc: "Creates a new instance of ${clazz.type.qualifiedName}, using the given String as closure content" as String,
                isStatic: true,
                params: [content: "java.lang.String"],
                type: clazz.type.qualifiedName
        )
    }

    method(
            name: "createFromScript",
            doc: "Creates a new instance of ${clazz.type.qualifiedName} reading from the given script" as String,
            isStatic: true,
            params: [type: "java.lang.Class<? extends groovy.lang.Script>"],
            type: clazz.type.qualifiedName
    )
    method(
            name: "createFromSnippet",
            doc: "Creates a new instance of ${clazz.type.qualifiedName}, using the content of the given file" as String,
            isStatic: true,
            params: [source: "java.io.File"],
            type: clazz.type.qualifiedName
    )

    method(
            name: "createTemplate",
            doc: "Creates the template for new instances of ${clazz.type.qualifiedName}" as String,
            isStatic: true,
            params: [closure: Closure.class.name],
            type: clazz.type.qualifiedName
    )

    method(
            name: "manualValidation",
            doc: "Controls whether validation will automatically executed after create." as String,
            params: [validate: Boolean.class.name]
    )
    method(
            name: "validate",
            doc: "Performs a manual validation" as String,
            params: []
    )

    classType?.allFields?.each { PsiField rawField ->
        if (rawField.name == "metaClass") return


        def field = new FieldConfig(rawField)
        def fieldType = field.targetConfig

        if (field.collectionOfDslObjects) {
            // inner class closure
            method(
                    name: field.name,
                    doc: "Enter $field.name via closure" as String,
                    params: [closure: Closure.class.name],
                    type: 'void'
            )
        } else if (fieldType) {
            // single dsl field
            if (fieldType.key) {

                // keyed
                if (!fieldType.isAbstract()) {
                    method(
                            name: field.name,
                            doc: "Sets the $field.name, using the key as $fieldType.key." as String,
                            params: ["$fieldType.key": "java.lang.String", value: 'Closure'],
                            type: 'void'
                    )
                }
                if (!fieldType.isFinal())
                    method(
                            name: field.name,
                            doc: "Sets the $field.name, using the key as $fieldType.key, using a fixed type" as String,
                            params: [type: "Class<? extends $fieldType.type.qualifiedName>", "$fieldType.key": "java.lang.String", value: 'Closure'],
                            type: 'void'
                    )
            } else {
                // unkeyed
                if (!fieldType.isAbstract())
                    method(
                            name: field.name,
                            doc: "Sets the $field.name" as String,
                            params: [value: 'Closure'],
                            type: 'void'
                    )
                if (!fieldType.isFinal())
                    method(
                            name: field.name,
                            doc: "Sets the $field.name" as String,
                            params: [type: "Class<? extends $fieldType.type.qualifiedName>", value: 'Closure'],
                            type: 'void'
                    )
            }
        } else {
            // simple field
            if (field.isList()) {
                //noinspection GroovyAssignabilityCheck
                method(
                        name: field.name,
                        doc: "Adds a number of ${field.elementType}s to $field.name list" as String,
                        params: [values: field.elementTypeAsVararg?.canonicalText],
                        type: 'void'
                )
                method(
                        name: field.name,
                        doc: "Adds a number of ${field.elementType}s to $field.name list" as String,
                        params: [values: "List<${field.elementType?.canonicalText ?: "?"}>"],
                        type: 'void'
                )
                method(
                        name: field.memberName,
                        doc: "Adds a single ${field.elementType} to $field.name list" as String,
                        params: [value: field.elementType?.canonicalText],
                        type: 'void'
                )
            } else if (field.isMap()) {
                method(
                        name: field.name,
                        doc: "Adds a map of entries to $field.name list" as String,
                        params: [values: field.type?.canonicalText],
                        type: 'void'
                )
                method(
                        name: field.memberName,
                        doc: "Adds a single ${field.elementType} to $field.name map using key as the key." as String,
                        params: [key: field.keyType?.canonicalText, value: field.valueType?.canonicalText],
                        type: 'void'
                )
            } else {
                method(
                        name: field.name,
                        doc: "Sets the $field.name" as String,
                        params: [value: field.type?.canonicalText],
                        type: 'void'
                )
                if (field.type?.canonicalText == "boolean") {
                    method(
                        name: field.name,
                        doc: "Sets the $field.name to true" as String,
                        type: 'void'
                    )
                }
            }
        }
    }
}

contributor(context(scope: closureScope(isArg: true), ctype:hasAnnotation("com.blackbuild.groovy.configdsl.transform.DSL"))) {

    ClassConfig clazz = new ClassConfig(psiClass)

    def dslCollectionFields = clazz.allDslCollectionFields

    ClassConfig targetAlternative = dslCollectionFields.findResult { FieldConfig field ->
        field.alternatives.findResult { ClassConfig type ->
            enclosingCall(type.uncapitalizedName) ? type : null
        }
    }


    if (targetAlternative) {
        delegatesTo(targetAlternative.type)
    } else {
        def imcStruct = dslCollectionFields.findResult {
            FieldConfig field ->
                def mc = field.memberName ? enclosingCall(field.memberName) : null
                if (mc) return [field, null, mc]

                def fc = enclosingCall(field.name)
                if (fc) return [field, fc, null]

                return  null
        }

        def (innerMostKnownClosureField, fieldCall, memberCall) = imcStruct ?: [null, null, null]

        if (innerMostKnownClosureField) {

            def elementType = innerMostKnownClosureField.targetConfig

            if (memberCall) {
                def call = memberCall
                // this is a single element closure
                if (call.arguments) {
                    //noinspection GroovyAssignabilityCheck
                    if (call.arguments[0].type?.rawType()?.canonicalText?.equals("java.lang.Class")) {
                        //noinspection GroovyAssignabilityCheck
                        delegatesTo(call.arguments[0].type.parameters[0].resolve())
                    } else {
                        delegatesTo(elementType.type)
                    }
                } else {
                    delegatesTo(elementType.type)
                }
            } else if (innerMostKnownClosureField.isDslObject) {
                def call = fieldCall
                // this is a single element closure
                if (call.arguments) {
                    //noinspection GroovyAssignabilityCheck
                    if (call.arguments[0].type?.rawType()?.canonicalText?.equals("java.lang.Class")) {
                        //noinspection GroovyAssignabilityCheck
                        delegatesTo(call.arguments[0].type.parameters[0].resolve())
                    } else {
                        delegatesTo(elementType.type)
                    }
                } else {
                    delegatesTo(elementType.type)
                }
            } else {
                // collection closure
                if (innerMostKnownClosureField.alternatives) {
                    innerMostKnownClosureField.alternatives.each { ClassConfig config ->
                        method(
                                name: config.uncapitalizedName,
                                doc: "Creates s single instance of $config.type and adds it." as String,
                                params: config.key ? ["$config.key": "java.lang.String", value: 'Closure'] : [value: 'Closure'],
                                type: 'void'
                        )
                    }

                } else {
                    if (!elementType.isAbstract()) {
                        method(
                                name: innerMostKnownClosureField.memberName,
                                doc: "Creates s single instance of $innerMostKnownClosureField.memberName and adds it." as String,
                                params: elementType.key ? ["$elementType.key": "java.lang.String", value: 'Closure'] : [value: 'Closure'],
                                type: 'void'
                        )
                    }
                    if (!elementType.isFinal()) {
                        method(
                                name: innerMostKnownClosureField.memberName,
                                doc: "Creates s single instance of $innerMostKnownClosureField.memberName and adds it." as String,
                                params: elementType.key ? [type: "Class<? extends $elementType.type.qualifiedName>", "$elementType.key": "java.lang.String", value: 'Closure'] : [type: "Class<? extends $elementType.type.qualifiedName>", value: 'Closure'],
                                type: 'void'
                        )
                    }
                }

                method(
                        name: innerMostKnownClosureField.memberName,
                        doc: """Reuses an existing instance of $elementType.type.qualifiedName.
This will only set the owner is value has not yet an owner set.""" as String,
                        params: [value: elementType.type.qualifiedName],
                        type: 'void'
                )
            }
        }
    }
}

@SuppressWarnings("GroovyAssignabilityCheck")
class FieldConfig {
    String name
    String memberName
    PsiField field

    ClassConfig targetConfig
    private PsiAnnotation fieldAnnotation

    boolean isDslObject
    boolean isKey
    boolean isOwner

    Set<ClassConfig> alternatives

    FieldConfig(PsiField field) {
        this.field = field
        this.fieldAnnotation = field.getAnnotation("com.blackbuild.groovy.configdsl.transform.Field")
        name = field.name

        if (isList() || isMap()) {
            memberName = this.fieldAnnotation?.findDeclaredAttributeValue("members")?.node?.text?.replace('"', '')

            if (!memberName)
                memberName = name.endsWith('s') ? name[0..-2] : name
        }

        ClassConfig config = new ClassConfig(field.classType)
        if (config.dslClass) {
            targetConfig = config
            isDslObject = true
        }
        else if (isCollectionOfDslObjects()) {
            targetConfig = new ClassConfig(elementType.resolve())

            alternatives = [] as Set
            def alternativesValues = fieldAnnotation?.findDeclaredAttributeValue("alternatives")

            if (alternativesValues) {
                alternativesValues.children.each {
                    PsiClass alternativ = it.resolve()
                    alternatives << new ClassConfig(alternativ)
                }

                alternatives << targetConfig
            }
        }

        isKey = field.hasAnnotation("com.blackbuild.groovy.configdsl.transform.Key")
        isOwner = field.hasAnnotation("com.blackbuild.groovy.configdsl.transform.Owner")
    }

    PsiType getType() {
        field.type
    }

    PsiClassType getElementType() {

        isList() ? keyType : isMap() ? getValueType() : null
    }

    PsiType getKeyType() {
        field.type.parameters.length > 0 ? field.type.parameters[0] as PsiType : null
    }

    PsiType getValueType() {
        field.type.parameters.length > 1 ? field.type.parameters[1] as PsiType : null
    }

    PsiEllipsisType getElementTypeAsVararg() {
        return elementType ? new PsiEllipsisType(elementType) : null
    }

    boolean isOfType(String typeString) {
        field?.type instanceof PsiClassType && (field.type.resolve()?.qualifiedName == typeString || field.type.resolve()?.supers?.find { it.qualifiedName == typeString })
    }

    boolean isList() {
        isOfType "java.util.List"
    }

    boolean isMap() {
        isOfType "java.util.Map"
    }

    boolean isCollectionOfDslObjects() {
        elementType?.resolve()?.getAnnotation("com.blackbuild.groovy.configdsl.transform.DSL")
    }

    @Override
    String toString() {
        return "Field: $field.name ($type.canonicalText) [$targetConfig]"
    }

    @Override
    boolean equals(Object obj) {
        if (!(obj instanceof FieldConfig)) return false
        if (obj.field?.containingClass?.name != this.field?.containingClass?.name) return false
        if (obj.field?.name != this.field.name) return false

        true
    }
}

class ClassConfig {
    String key
    PsiClass type
    private annotation

    ClassConfig(PsiClass type) {
        this.type = type

        annotation = type?.getAnnotation("com.blackbuild.groovy.configdsl.transform.DSL")

        type?.allFields?.each {
            if (it.hasAnnotation("com.blackbuild.groovy.configdsl.transform.Key"))
                key = it.name
        }
    }

    boolean isDslClass() {
        annotation != null
    }

    Set<FieldConfig> getAllDslCollectionFields() {
        def ownDSLCollectionFields = type.fields.collect { PsiField field -> new FieldConfig(field)}.findAll{FieldConfig f -> f.collectionOfDslObjects } as Set

        List<FieldConfig> result = ownDSLCollectionFields.collect()

        result.addAll(0, getAllSingleDSLFields())

        ownDSLCollectionFields.each { FieldConfig f ->
            if (f.targetConfig != this) {
                result.add(0, f)
                result.addAll(0, f.targetConfig.allDslCollectionFields)
            }
        }

        return result.unique() as Set
    }

    Set<FieldConfig> getAllSingleDSLFields() {
        return type.fields.collect { PsiField field -> new FieldConfig(field)}.findAll{FieldConfig f -> f.isDslObject && !f.isOwner } as Set
    }

    String getUncapitalizedName() {
        String name = type?.name
        name ? name[0].toLowerCase() + name.substring(1) : ''
    }

    @Override
    String toString() {
        return "DSLClass: $type.qualifiedName"
    }

    boolean isFinal() {
        type.getModifierList().hasExplicitModifier("final")
    }

    boolean isAbstract() {
        type.getModifierList().hasExplicitModifier("abstract")
    }

    @Override
    boolean equals(Object obj) {
        if (!(obj instanceof ClassConfig)) return false

        return (obj.type.name == this.type.name)
    }
}
