import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-contacts-plugin:3.0.1'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:5.1.4'
        classpath 'com.netflix.nebula:nebula-release-plugin:6.0.2'
        classpath 'com.netflix.nebula:gradle-info-plugin:3.+'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
}

ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'nebula.maven-publish'
apply plugin: 'nebula.release'
apply plugin: 'license'
apply plugin: 'nebula.info'
apply plugin: 'nebula.javadoc-jar'
apply plugin: 'nebula.source-jar'
apply plugin: 'nebula.contacts'
apply plugin: 'ch.raffael.markdown-doclet'
apply plugin: 'com.jfrog.bintray'
apply plugin: "org.sonarqube"

description 'A transformation for creating convenient configuration model DSLs.'
group 'com.blackbuild.klum.ast'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    jcenter()
}


sourceSets {
    main {
        resources {
            srcDir("src/gdsl")
        }
    }
}

configurations {
    gdsl
    compileOnly.extendsFrom gdsl
    testCompileOnly.extendsFrom compileOnly
}

license {
    mapping("gdsl", "JAVADOC_STYLE")
}

dependencies {
    compileOnly "org.codehaus.groovy:groovy-all"
    //compileOnly "com.intellij:openapi:7.0.3"

    gdsl 'com.github.adedayo.intellij.sdk:groovy-psi:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:openapi:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:java-psi-api:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:util:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:core-api:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:java-psi-impl:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:annotations:142.1'

    testCompile("org.spockframework:spock-core:1.1-groovy-2.4")
    testCompile "org.jetbrains:annotations:16.0.2"
    testRuntime "net.bytebuddy:byte-buddy:1.7.5"
    testRuntime "org.objenesis:objenesis:2.6"
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
    compile "com.blackbuild.klum.common:klum-common:0.6.0-rc.2"
}

configurations.all {
    resolutionStrategy {
        force "org.codehaus.groovy:groovy-all:2.4.13"
    }
}

bintray {
    user = findProperty('bintrayUser')
    key = findProperty('bintrayApiKey')

    publications = ['nebula']
    dryRun = false
    publish = true
    pkg {
        repo = 'klum-dsl'
        userOrg = 'klum-dsl'
        name = project.name
        desc = project.description
        websiteUrl = 'https://github.com/klum-dsl/klum-ast'
        issueTrackerUrl = 'https://github.com/klum-dsl/klum-ast/issues'
        vcsUrl = 'https://github.com/klum-dsl/klum-ast.git'
        licenses = ['MIT']
        labels = ['groovy', 'ast']
        publicDownloadNumbers = true
        attributes = [:]
        version {
            name = project.version
            vcsTag = project.version
            attributes = [:]
            gpg {
                sign = true
                passphrase = findProperty("signing.password")
            }
            mavenCentralSync {
                sync = !version.toString().contains(".dev+")
                user = findProperty("nexusUsername")
                password = findProperty("nexusPassword")
            }
        }
    }
}

apply plugin: 'org.ajoberstar.github-pages'

githubPages {
    commitMessage = "updated wiki for $version"
    repoUri = "git@github.com:klum-dsl/klum-ast.wiki.git"
    targetBranch = 'master'
    workingPath = "$buildDir/wiki"
    pages {
        from 'wiki'
        filesMatching('*.md') {
            filter(ReplaceTokens, tokens: [version: version.toString()])
        }
        from('.') {
            include("CHANGES.md")
            rename('CHANGES.md', "Changelog.md")
        }
    }
}

jacoco {
    toolVersion = "0.8.2"
}

contacts {
    'stephan@blackbuild.com' {
        moniker 'Stephan Pauxberger'
        github 'pauxus'
    }
}

publishing {
    publications {
        nebula(MavenPublication) {
            pom.withXml {
                def p = asNode()
                p.dependencies.dependency.find { it.artifactId.text() == "groovy-all" }.appendNode('optional', true)
                p.name.first().setValue('KlumAST')
                p.appendNode('licenses').appendNode('license').
                        appendNode('name', 'The MIT License (MIT)').parent().
                        appendNode('url', 'http://opensource.org/licenses/MIT')
            }
        }
    }
}

releaseCheck.doLast {
    if (!gradle.includedBuilds.isEmpty())
        throw new GradleException("Releasing is not allowed with composite builds. Please release $gradle.includedBuilds separatly")
}

tasks.release.dependsOn tasks.build
tasks.postRelease.dependsOn tasks.publish, tasks.publishGhPages