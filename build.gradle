import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4'
    }
}

plugins {
    id 'nebula.release' version '15.2.0'
    id 'base'

    id 'nebula.maven-publish' version '17.3.2' apply false
    id 'nebula.javadoc-jar' version '17.3.2' apply false
    id 'nebula.source-jar' version '17.3.2' apply false
    id 'nebula.contacts' version '5.1.0' apply false
    id 'nebula.info' version '9.1.2' apply false
    id "com.jfrog.bintray" version "1.8.5" apply false
    id "com.github.hierynomus.license" version "0.15.0"
    id 'org.ajoberstar.git-publish' version '3.0.0'
    id "com.github.ben-manes.versions" version "0.36.0"
}


group 'com.blackbuild.klum.ast'

description 'A transformation for creating convenient configuration model DSLs.'

ext {
    commonVersion = '0.6.0'
}

license {
    mapping("java", "SLASHSTAR_STYLE")
    mapping("groovy", "SLASHSTAR_STYLE")
    mapping("gdsl", "SLASHSTAR_STYLE")
    exclude("mockup/**")
    strictCheck(true)
}

subprojects {
    apply plugin: 'nebula.maven-publish'
    apply plugin: 'nebula.javadoc-jar'
    apply plugin: 'nebula.source-jar'
    apply plugin: 'nebula.release'
    apply plugin: 'nebula.contacts'
    apply plugin: 'nebula.info'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'ch.raffael.markdown-doclet'

    group 'com.blackbuild.klum.ast'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
    }
    jacoco {
        toolVersion = "0.8.2"
    }


    dependencies {
        compileOnly "org.codehaus.groovy:groovy-all"
        compileOnly "org.jetbrains:annotations:16.0.2"
        //compileOnly "com.intellij:openapi:7.0.3"

        testImplementation("org.spockframework:spock-core:1.3-groovy-2.4")
        testImplementation "org.jetbrains:annotations:16.0.2"

        testRuntimeOnly "net.bytebuddy:byte-buddy:1.9.3"
        testRuntimeOnly "org.objenesis:objenesis:2.6"
        testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.5'

    }

    configurations.testCompileOnly.extendsFrom configurations.compileOnly

    configurations.all {
        resolutionStrategy {
            force "org.codehaus.groovy:groovy-all:2.4.13"
        }
    }

    contacts {
        'stephan@blackbuild.com' {
            moniker 'Stephan Pauxberger'
            github 'pauxus'
        }
    }

    publishing {
        publications {
            nebula(MavenPublication) {

                pom {
                    licenses {
                        license {
                            name = 'The MIT License (MIT)'
                            url = 'http://opensource.org/licenses/MIT'
                        }
                    }
                }
            }
        }
    }


    bintray {
        user = findProperty('bintrayUser')
        key = findProperty('bintrayApiKey')

        publications = ['nebula']
        dryRun = true
        publish = true
        pkg {
            repo = 'klum-dsl'
            userOrg = 'klum-dsl'
            name = project.name
            desc = project.description
            websiteUrl = 'https://github.com/klum-dsl/klum-ast'
            issueTrackerUrl = 'https://github.com/klum-dsl/klum-ast/issues'
            vcsUrl = 'https://github.com/klum-dsl/klum-ast.git'
            licenses = ['MIT']
            labels = ['groovy', 'ast']
            publicDownloadNumbers = true
            attributes = [:]
            version {
                name = project.version
                vcsTag = project.version
                attributes = [:]
                gpg {
                    sign = true
                    passphrase = findProperty("signing.password")
                }
                mavenCentralSync {
                    sync = !version.toString().contains(".dev+")
                    user = findProperty("nexusUsername")
                    password = findProperty("nexusPassword")
                }
            }
        }
    }

    rootProject.tasks.release.dependsOn tasks.build
    rootProject.tasks.release.finalizedBy tasks.publish
}

gitPublish {
    repoUri = 'git@github.com:klum-dsl/klum-ast.wiki.git'
    branch = 'master'

    contents {
        from 'wiki'
        filesMatching('*.md') {
            filter(ReplaceTokens, tokens: [version: version.toString()])
        }
        from('.') {
            include("CHANGES.md")
            rename('CHANGES.md', "Changelog.md")
        }
    }

    repoDir = file("$buildDir/gitPublish")
    
    commitMessage = "updated wiki for $version"
}

releaseCheck.doLast {
    if (!gradle.includedBuilds.isEmpty())
        throw new GradleException("Releasing is not allowed with composite builds. Please release $gradle.includedBuilds separately")
}

evaluationDependsOnChildren()


tasks.candidate.finalizedBy tasks.gitPublishPush
tasks.final.finalizedBy tasks.gitPublishPush

