import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4'
    }
}

plugins {
    id 'nebula.release' version '15.2.0'
    id 'base'

    id 'nebula.maven-publish' version '17.3.2' apply false
    id 'nebula.javadoc-jar' version '17.3.2' apply false
    id 'nebula.source-jar' version '17.3.2' apply false
    id 'nebula.contacts' version '5.1.0' apply false
    //id 'nebula.info' version '9.1.2' apply false
    id "com.github.hierynomus.license" version "0.15.0"
    id 'org.ajoberstar.git-publish' version '3.0.1'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id "com.github.ben-manes.versions" version "0.36.0"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

ext {
    groovyVersion = project.findProperty("groovyVersion") ?: '2.4.21'
    // groovyVersion = '3.0.10'
}

group 'com.blackbuild.klum.ast'
description 'A transformation for creating convenient configuration model DSLs.'

nexusPublishing {
    repositories {
        sonatype()
    }
}

subprojects {
    apply plugin: 'nebula.maven-publish'
    apply plugin: 'nebula.javadoc-jar'
    apply plugin: 'nebula.source-jar'
    apply plugin: 'nebula.release'
    apply plugin: 'nebula.contacts'
    // apply plugin: 'nebula.info'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'ch.raffael.markdown-doclet'
    apply plugin: 'signing'
    apply plugin: 'com.github.hierynomus.license'

    group 'com.blackbuild.klum.ast'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
    }
    jacoco {
        toolVersion = "0.8.2"
    }

    dependencies {
        compileOnly "org.codehaus.groovy:groovy-all"
        compileOnly "org.jetbrains:annotations:16.0.2"
        //compileOnly "com.intellij:openapi:7.0.3"

        if (rootProject.ext.groovyVersion.startsWith("2.")) {
            testImplementation("org.spockframework:spock-core:1.3-groovy-2.4")
        } else {
            testImplementation("org.spockframework:spock-core:2.1-groovy-3.0")
            testImplementation("org.spockframework:spock-junit4:2.1-groovy-3.0")
        }
        testImplementation "org.jetbrains:annotations:16.0.2"

        testRuntimeOnly "net.bytebuddy:byte-buddy:1.9.3"
        testRuntimeOnly "org.objenesis:objenesis:2.6"
    }

    configurations.testCompileOnly.extendsFrom configurations.compileOnly

    configurations.all {
        resolutionStrategy {
            force "org.codehaus.groovy:groovy-all:$groovyVersion"
        }
    }

    contacts {
        'stephan@blackbuild.com' {
            moniker 'Stephan Pauxberger'
            github 'pauxus'
        }
    }

    publishing {
        publications {
            nebula(MavenPublication) {
                suppressPomMetadataWarningsFor('testFixturesApiElements')
                suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
                pom {
                    url = "https://github.com/klum-dsl/klum-ast"
                    licenses {
                        license {
                            name = 'The MIT License (MIT)'
                            url = 'http://opensource.org/licenses/MIT'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:klum-dsl/klum-ast.git'
                        developerConnection = 'scm:git:git@github.com:klum-dsl/klum-ast.git'
                        url = 'https://github.com/klum-dsl/klum-ast'
                    }
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal") }
        sign publishing.publications.nebula
    }

    license {
        header = rootProject.file("LICENSE")
        mapping("java", "SLASHSTAR_STYLE")
        mapping("groovy", "SLASHSTAR_STYLE")
        mapping("gdsl", "SLASHSTAR_STYLE")
        exclude("mockup/**")
        strictCheck(true)
    }

    test {
        if (!rootProject.ext.groovyVersion.startsWith("2."))
            useJUnitPlatform()
    }

}

gitPublish {
    repoUri = 'git@github.com:klum-dsl/klum-ast.wiki.git'
    branch = 'master'

    contents {
        from 'wiki'
        filesMatching('*.md') {
            filter(ReplaceTokens, tokens: [version: version.toString()])
        }
        from('.') {
            include("CHANGES.md")
            rename('CHANGES.md', "Changelog.md")
        }
    }

    repoDir = file("$buildDir/gitPublish")
    
    commitMessage = "updated wiki for $version"
}

releaseCheck.doLast {
    if (!gradle.includedBuilds.isEmpty())
        throw new GradleException("Releasing is not allowed with composite builds. Please release $gradle.includedBuilds separately")
}

evaluationDependsOnChildren()

tasks.candidate.finalizedBy tasks.gitPublishPush
tasks.final.finalizedBy tasks.gitPublishPush