import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4'
    }
}

plugins {
    id 'groovy'
    id 'java-library'
    id 'jacoco'
    id 'signing'
    id 'nebula.maven-publish' version '9.5.0'
    id 'nebula.javadoc-jar' version '9.5.0'
    id 'nebula.source-jar' version '9.5.0'
    id 'nebula.release' version '9.2.0'
    id 'nebula.contacts' version '5.0.0'
    id "com.github.hierynomus.license" version "0.15.0"
    id 'org.ajoberstar.git-publish' version '2.1.1'
}

apply plugin: 'ch.raffael.markdown-doclet'

description 'A transformation for creating convenient configuration model DSLs.'
group 'com.blackbuild.klum.ast'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    mavenCentral()
}


sourceSets {
    main {
        resources {
            srcDir("src/gdsl")
        }
    }
}

configurations {
    gdsl
    compileOnly.extendsFrom gdsl
    testCompileOnly.extendsFrom compileOnly
}

license {
    mapping("java", "SLASHSTAR_STYLE")
    mapping("groovy", "SLASHSTAR_STYLE")
    mapping("gdsl", "SLASHSTAR_STYLE")
    exclude("mockup/**")
    strictCheck(true)
}

dependencies {
    compileOnly "org.codehaus.groovy:groovy-all"
    //compileOnly "com.intellij:openapi:7.0.3"

    gdsl 'com.github.adedayo.intellij.sdk:groovy-psi:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:openapi:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:java-psi-api:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:util:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:core-api:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:java-psi-impl:142.1'
    gdsl 'com.github.adedayo.intellij.sdk:annotations:142.1'

    testCompile("org.spockframework:spock-core:1.1-groovy-2.4")
    testCompile "org.jetbrains:annotations:16.0.2"
    testRuntime "net.bytebuddy:byte-buddy:1.7.5"
    testRuntime "org.objenesis:objenesis:2.6"
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
    compile "com.blackbuild.klum.common:klum-common:0.6.0"
}

configurations.all {
    resolutionStrategy {
        force "org.codehaus.groovy:groovy-all:2.4.13"
    }
}

test {
    inputs.dir file("src/test/scenarios")
    outputs.dir file("$buildDir/test-classes")
}

gitPublish {
    repoUri = 'git@github.com:klum-dsl/klum-ast.wiki.git'
    branch = 'master'

    contents {
        from 'wiki'
        filesMatching('*.md') {
            filter(ReplaceTokens, tokens: [version: version.toString()])
        }
        from('.') {
            include("CHANGES.md")
            rename('CHANGES.md', "Changelog.md")
        }
    }

    repoDir = file("$buildDir/gitPublish")
    
    commitMessage = "updated wiki for $version"
}

jacoco {
    toolVersion = "0.8.2"
}

contacts {
    'stephan@blackbuild.com' {
        moniker 'Stephan Pauxberger'
        github 'pauxus'
    }
}

signing {
    sign publishing.publications.nebula
}

publishing {
    publications {
        nebula(MavenPublication) {
            pom.withXml {
                def p = asNode()
                p.dependencies.dependency.find { it.artifactId.text() == "groovy-all" }.appendNode('optional', true)
            }
            pom {
                name = "KlumAST"
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:klum-dsl/klum-ast.git'
                    developerConnection = 'scm:git:git@github.com:klum-dsl/klum-ast.git'
                    url = 'https://github.com/klum-dsl/klum-ast'
                }
            }

        }
    }
    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = findProperty("nexusUsername")
                password = findProperty("nexusPassword")
            }
        }
    }

}

releaseCheck.doLast {
    if (!gradle.includedBuilds.isEmpty())
        throw new GradleException("Releasing is not allowed with composite builds. Please release $gradle.includedBuilds separately")
}

tasks.release.dependsOn tasks.build
tasks.postRelease.dependsOn tasks.publish, tasks.gitPublishPush